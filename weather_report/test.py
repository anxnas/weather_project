from django.test import TestCase, Client
from django.urls import reverse
import base64
import json
from unittest.mock import patch

class WeatherViewTests(TestCase):
    def setUp(self):
        self.client = Client()
        self.url = reverse('index')

    @patch('weather_report.views.requests.get')
    def test_weather_info_display(self, mock_get):
        # Mock the API response
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            "current_condition": [{
                "temp_C": "23",
                "FeelsLikeC": "25",
                "humidity": "61",
                "lang_ru": [{"value": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"}],
                "windspeedKmph": "15",
                "winddir16Point": "WNW",
                "pressure": "1011"
            }],
            "nearest_area": [{
                "areaName": [{"value": "–ú–æ—Å–∫–≤–∞"}],
                "country": [{"value": "Russia"}]
            }]
        }
        mock_get.return_value.text = "‚õÖÔ∏è"

        response = self.client.get(self.url, {'city': '–ú–æ—Å–∫–≤–∞'})

        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "–ú–æ—Å–∫–≤–∞")
        self.assertContains(response, "Russia")
        self.assertContains(response, "23")
        self.assertContains(response, "25")
        self.assertContains(response, "61")
        self.assertContains(response, "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å")
        self.assertContains(response, "15")
        self.assertContains(response, "WNW")
        self.assertContains(response, "1011")
        self.assertContains(response, "‚õÖÔ∏è")

    def test_last_city_cookie(self):
        city = "–ú–æ—Å–∫–≤–∞"
        encoded_city = base64.b64encode(city.encode('utf-8')).decode('utf-8')
        self.client.cookies['last_city'] = encoded_city

        response = self.client.get(self.url)

        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "–†–∞–Ω–µ–µ –≤—ã —Å–º–æ—Ç—Ä–µ–ª–∏ –ú–æ—Å–∫–≤–∞")

    @patch('weather_report.views.requests.get')
    def test_search_history(self, mock_get):
        # Mock the API response for history
        mock_get.return_value.status_code = 200
        mock_get.return_value.text = "–ú–æ—Å–∫–≤–∞: ‚õÖÔ∏è  üå°Ô∏è+23¬∞C üå¨Ô∏è‚Üò15km/h"

        search_history = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]
        encoded_history = base64.b64encode(json.dumps(search_history).encode('utf-8')).decode('utf-8')
        self.client.cookies['search_history'] = encoded_history

        response = self.client.get(self.url)

        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "–ú–æ—Å–∫–≤–∞: ‚õÖÔ∏è  üå°Ô∏è+23¬∞C üå¨Ô∏è‚Üò15km/h")
        self.assertContains(response, "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")

    @patch('weather_report.views.requests.get')
    def test_add_to_search_history(self, mock_get):
        # Mock the API response
        mock_get.return_value.status_code = 200
        mock_get.return_value.json.return_value = {
            "current_condition": [{
                "temp_C": "23",
                "FeelsLikeC": "25",
                "humidity": "61",
                "lang_ru": [{"value": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å"}],
                "windspeedKmph": "15",
                "winddir16Point": "WNW",
                "pressure": "1011"
            }],
            "nearest_area": [{
                "areaName": [{"value": "–ú–æ—Å–∫–≤–∞"}],
                "country": [{"value": "Russia"}]
            }]
        }
        mock_get.return_value.text = "‚õÖÔ∏è"

        response = self.client.get(self.url, {'city': '–ú–æ—Å–∫–≤–∞'})

        self.assertEqual(response.status_code, 200)
        self.assertIn('search_history', response.cookies)
        search_history = json.loads(base64.b64decode(response.cookies['search_history'].value).decode('utf-8'))
        self.assertIn('–ú–æ—Å–∫–≤–∞', search_history)